<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAKioAAAEACACwDAAAFgAAACgAAAAqAAAAVAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAP8AAQH/AAIC/wADA/8ABAT/AAUF/wAGBv8ABwf/AAgI/wAJCf8ACgr/AAsL/wAMDP8ADQ3/AA8P
        /wAREf8AExP/ABQU/wAVFf8AFhb/ABsb/wAdHf8AHx//ACMj/wAnJ/8AKCj/ACkp/wAqKv8AKyv/ADEx
        /wA0NP8ANTX/ADY2/wA7O/8APT3/AEJC/wBGRv8ASUn/AEpK/wBLS/8ATEz/AE9P/wBQUP8AUlL/AFVV
        /wBXV/8AXFz/AF9f/wBhYf8AZGT/AGVl/wBnZ/8AaGj/AGtr/wBsbP8AcXH/AHJy/wBzc/8Ad3f/AHh4
        /wB6ev8Ae3v/AH9//wCAgP8AgYH/AIKC/wCGhv8AiYn/AI6O/wCPj/8AkZH/AJSU/wCXl/8AmJj/AJyc
        /wCenv8An5//AKCg/wCiov8Ao6P/AKmp/wCqqv8ArKz/AK2t/wCurv8AsLD/ALGx/wCysv8As7P/ALa2
        /wC7u/8AwMD/AMHB/wDCwv8AxcX/AMfH/wDIyP8Aysr/AM3N/wDOzv8A0ND/ANLS/wDT0/8A19f/ANjY
        /wDd3f8A3t7/AN/f/wDh4f8A4uL/AOPj/wDk5P8A5+f/AOzs/wDv7/8A8PD/APLy/wD09P8A9fX/APn5
        /wD7+/8A/Pz/AP39/wD+/v8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
</value>
  </data>
</root>